Nintendo 64 Toolkit: opcodes v1.1 by anarko <anarko@flashback.net>

Part E: Detailed list of RSP opcodes                  released on 1999-04-21
----------------------------------------------------------------------------

All information on the RSP was provided by my friend Zilmar.

****************************************************************************
** Registers                                                              **
****************************************************************************
  Main GPR registers:
  -------------------
     00h = r0/reg0     08h = t0/reg8     10h = s0/reg16    18h = t8/reg24
     01h = at/reg1     09h = t1/reg9     11h = s1/reg17    19h = t9/reg25
     02h = v0/reg2     0Ah = t2/reg10    12h = s2/reg18    1Ah = k0/reg26
     03h = v1/reg3     0Bh = t3/reg11    13h = s3/reg19    1Bh = k1/reg27
     04h = a0/reg4     0Ch = t4/reg12    14h = s4/reg20    1Ch = gp/reg28
     05h = a1/reg5     0Dh = t5/reg13    15h = s5/reg21    1Dh = sp/reg29
     06h = a2/reg6     0Eh = t6/reg14    16h = s6/reg22    1Eh = s8/reg30
     07h = a3/reg7     0Fh = t7/reg15    17h = s7/reg23    1Fh = ra/reg31

  Vector registers:
  -----------------
     00h = $v0         08h = $v8         10h = $v16        18h = $v24
     01h = $v1         09h = $v9         11h = $v17        19h = $v25
     02h = $v2         0Ah = $v10        12h = $v18        1Ah = $v26
     03h = $v3         0Bh = $v11        13h = $v19        1Bh = $v27
     04h = $v4         0Ch = $v12        14h = $v20        1Ch = $v28
     05h = $v5         0Dh = $v13        15h = $v21        1Dh = $v29
     06h = $v6         0Eh = $v14        16h = $v22        1Eh = $v30
     07h = $v7         0Fh = $v15        17h = $v23        1Fh = $v31

****************************************************************************
** Vector Register Layout                                                 **
****************************************************************************
+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
|    e0     |    e1     |    e2     |    e3     |    e4     |    e5     |    e6     |    e7     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| b0  | b1  | b2  | b3  | b4  | b5  | b6  | b7  | b8  | b9  | b10 | b11 | b12 | b13 | b14 | b15 |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+


****************************************************************************
** Load Instructions                                                      **
****************************************************************************
  +-----------+---------------------------------------------------+
  | LBV       | Load byte to vector register                      |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00000  |  ele  |   offset    |
  +-----6-----+----5----+----5----+----5----+---4---+-----7-------+
  Format:  LBV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | LSV       | Load short (2 bytes) to vector register           |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00001  |  ele  |   offset    |
  +-----6-----+----5----+----5----+----5----+---4---+-----7-------+
  Format:  LSV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | LLV       | Load long (4 bytes) to vector register            |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00010  |  ele  |   offset    |
  +-----6-----+----5----+----5----+----5----+---4---+-----7-------+
  Format:  LLV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | LDV       | Load double (8 bytes) to vector register          |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00011  |  ele  |    offset   |
  +-----6-----+----5----+----5----+----5----+---4---+------7------+
  Format:  LDV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | LQV       | Load quadword (16 bytes) to vector register       |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00100  |   0   |    offset   |
  +-----6-----+----5----+----5----+----5----+---4---+------7------+
  Format:  LQV $vt[0], offset(base)


  +-----------+---------------------------------------------------+
  | LRV       | Load rest (16 bytes) to vector                    |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00101  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  LRV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | LPV       | Load packed to vector                             |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00110  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  LPV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | LUV       | Load unpacked to vector                           |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00111  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  LUV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | LHV       | Load half to vector                               |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01000  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  LHV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | LFV       | Load fourth to vector                             |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01001  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  LFV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | LTV       | Load transpose to vector                          |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01011  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  LTV $vt[ele], offset(base)


****************************************************************************
** Store Instructions                                                     **
****************************************************************************
  +-----------+---------------------------------------------------+
  | SBV       | Store byte from vector                            |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00000  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SBV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | SSV       | Store short (2 bytes) from vector                 |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00001  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SSV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | SLV       | Store long (4 bytes) from vector                  |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00010  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SLV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | SDV       | Store double (8 bytes) from vector                |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00011  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SDV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | SQV       | Store quad (16 bytes) from vector                 |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00100  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SQV $vt[0], offset(base)


  +-----------+---------------------------------------------------+
  | SRV       | Store rest from vector                            |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00101  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SRV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | SPV       | Store packed from vector                          |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00110  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SPV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | SUV       | Store unpacked from vector                        |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  00111  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SUV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | SHV       | Store half from vector                            |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01000  |   0   |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SHV $vt[0], offset(base)

  +-----------+---------------------------------------------------+
  | SFV       | Store fourth from vector                          |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01001  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SFV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | SWV       | Store wrap from vector                            |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01010  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  SWV $vt[ele], offset(base)

  +-----------+---------------------------------------------------+
  | STV       | Store transpose from vector                       |
  +-----------+---------+---------+---------+-------+-------------+
  |  110010   |  base   |   vt    |  01011  |  ele  |     offset  |
  +-----6-----+----5----+----5----+----5----+---4---+-------7-----+
  Format:  STV $vt[ele], offset(base)


****************************************************************************
** Vector Multiply Instructions                                           **
****************************************************************************
  -----------------------------------------------------------------
  | VMULF     | Vector Multiply of Signed Fractions               |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMULF $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMULU     | Vector Multiply Unsigned Frac                     |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000001   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMULU $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VRNDP     | Vector Accumulator DCT Round (+)                  |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000010   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRNDP $vd, 0|1, $vt[ele]

  -----------------------------------------------------------------
  | VMULQ     | Vector Multiply MPEG Quantization                 |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000011   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMULQ $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMUDL     | Vector Multiply of Low Partial Products           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000100   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMUDL $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMUDM     | Vector Multiply of Mid Partial Products           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMUDM $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMUDN     | Vector Multiply of Mid Partial Products           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000110   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMUDN $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMUDH     | Vector Multiply of High Partial Products          |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  000111   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMUDH $vd, $vs, $vt[ele]


****************************************************************************
** Vector Multiply Accumulate Instructions                                **
****************************************************************************
  -----------------------------------------------------------------
  | VMACF     | Vector Multiply Accumulate of Signed Fractions    |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMACF $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMACU     | Vector Multiply Accumulate of Unsigned Fractions  |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001001   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMACU $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VRNDN     | Vector Accumulator DCT Round (-)                  |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001010   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRNDN $vd, 0|1, $vt[ele]

  -----------------------------------------------------------------
  | VMACQ     | Vector Accumulate Oddification                    |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001011   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMACQ $vd, 0, 0[ele]

  -----------------------------------------------------------------
  | VMADL     | Vector multiply accumulate of Low Partial Products |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001100   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMADL $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMADM     | Vector multiply accumulate of Mid Partial Products |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMADM $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMADN     | Vector multiply accumulate of Mid Partial Products |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001110   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMADN $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMADH     | Vector multiply accumulate of High Partial Products |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  001111   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMADH $vd, $vs, $vt[ele]


****************************************************************************
** Vector Add Instructions                                                **
****************************************************************************
  -----------------------------------------------------------------
  | VADD      | Vector Add of Short Elements                      |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  010000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VADD $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VSUB      | Vector Subtraction of Short Elements              |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  010001   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VSUB $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VABS      | Vector Absolute Value of Short Elements           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  010011   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VABS $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VADDC     | Vector Add Short Elements with Carry              |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  010100   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VADDC $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VSUBC     | Vector Subtraction of Short Elements with Carry   |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  010101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VSUBC $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VSAR     | Vector Accumulator Read (and Write)                |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  011101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VSAR $vd, $vs, $vt[ele]


****************************************************************************
** Vector Select Instructions                                             **
****************************************************************************
  -----------------------------------------------------------------
  | VLT       | Vector Select Less Than                           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VLT $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VEQ       | Vector Select Equal                               |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100001   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VEQ $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VNE       | Vector Select Not Equal                           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100010   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VNE $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VGE       | Vector Select Greater Than or Equal               |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100011   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VGE $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VCL       | Vector Select Clip Test Low                       |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |  vd   |  100100   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VCL $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VCH       | Vector Select Clip Test High                      |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VCH $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VCR       | Vector Select Crimp Test Low                      |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100110   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VCR $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VMRG      | Vector Select Merge                               |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  100111   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMRG $vd, $vs, $vt[ele]


****************************************************************************
** Vector Logical Instructions                                            **
****************************************************************************
  -----------------------------------------------------------------
  | VAND      | Vector AND of Short Elements                      |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  101000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VAND $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VNAND     | Vector NAND of Short Elements                     |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  101001   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VNAND $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VOR       | Vector OR of Short Elements                       |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  101010   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VOR $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VNOR      | Vector NOR of Short Elements                      |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  101011   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VNOR $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VXOR      | Vector XOR of Short Elements                      |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  101100   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VXOR $vd, $vs, $vt[ele]

  -----------------------------------------------------------------
  | VNXOR     | Vector NXOR of Short Elements                     |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  101101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VNXOR $vd, $vs, $vt[ele]


****************************************************************************
** Vector Divide Instructions                                             **
****************************************************************************
  -----------------------------------------------------------------
  | VRCP      | Vector Element Scalar Reciprocal (Single Precision) |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |   vd    |  110000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRCP $vd[de], $vt[ele]

  -----------------------------------------------------------------
  | VRCPL     | Vector Element Scalar Reciprocal (Double Prec. Low)  |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |   vd    |  110001   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRCPL $vd[de], $vt[ele]

  -----------------------------------------------------------------
  | VRCPH     | Vector Element Scalar Reciprocal (Double Prec. High) |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |   vd    |  110010   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRCPH $vd[de], $vt[ele]

  -----------------------------------------------------------------
  | VMOV      | Vector Element Scalar Move                        |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |  vd   |  110011   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VMOV $vd[de], $vt[ele]

  -----------------------------------------------------------------
  | VRSQ      | Vector Element Scalar SQRT Reciprocal             |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |  vd   |    110100   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRSQ $vd[de], $vt[ele]

  -----------------------------------------------------------------
  | VRSQL     | Vector Element Scalar SQRT Reciprocal (Double Prec. Low) |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |   vd    |  110101   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRSQL $vd[de], vt[ele]

  -----------------------------------------------------------------
  | VRSQH     | Vector Element Scalar SQRT Reciprocal (Double Prec. High) |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   de    |   vd    |  110110   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VRSQH $vd[de], vt[ele]

  -----------------------------------------------------------------
  | VNOP      | Vector Null Instruction                           |
  |-----------|---------------------------------------------------|
  |  010010   |1|  ele  |   vt    |   vs    |   vd    |  110000   |
  ------6------1----4--------5---------5---------5----------6------
  Format:  VNOP 

